[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "preprocess_toolbox"
version = "0.0.1"
description = "A preprocessing toolbox for converting datasets into assets ready for ML based workloads"
readme = "README.rst"
authors = [
  {name = "James Byrne", email = "digitalinnovation@bas.ac.uk"}
]
maintainers = [
  {name = "James Byrne", email = "digitalinnovation@bas.ac.uk"}
]
classifiers = [

]
license = {text = "MIT license"}
dependencies = [
    "download-toolbox",
    "orjson",
]

[project.optional-dependencies]
dev = [
    "mypy",  # linting
    "ruff",  # linting
    "watchdog",
    "flake8",
    "tox",
    "coverage",
    "twine",
    "pytest",
    "black",
    "build",
    "importlib_metadata",
    "pre-commit",
]
docs = [
  "jinja2",
  "Sphinx",
  "myst_parser"
]

[project.scripts]
preprocess_missing_spatial = "preprocess_toolbox.dataset.cli:missing_spatial"
preprocess_missing_time = "preprocess_toolbox.dataset.cli:missing_time"
preprocess_regrid = "preprocess_toolbox.dataset.cli:regrid"
preprocess_rotate = "preprocess_toolbox.dataset.cli:rotate"

preprocess_dataset = "preprocess_toolbox.dataset.cli:process_dataset"
preprocess_loader_init = "preprocess_toolbox.loader.cli:init_loader"

# Generation of metadata types
preprocess_add_mask = "preprocess_toolbox.meta.cli:mask"
preprocess_add_channel = "preprocess_toolbox.meta.cli:channel"

preprocess_tfdata_dataset_create = "preprocess_toolbox.loader.cli:tfdataset_create"
preprocess_tfdata_dataset_cache = "preprocess_toolbox.loader.cli:tfdataset_cache"

[project.urls]

bugs = "https://github.com/antarctica/preprocess_toolbox/issues"
changelog = "https://github.com/antarctica/preprocess_toolbox/blob/master/changelog.md"
homepage = "https://github.com/antarctica/preprocess_toolbox"

[tool.setuptools]
py-modules = ["preprocess_toolbox"]

[tool.setuptools.dynamic]
version = {attr = "preprocess_toolbox.__version__"}
readme = {file = ["README.md"]}

[tool.setuptools.package-data]
"*" = ["*.*"]

# Mypy
# ----

[tool.mypy]
files = "."

# Use strict defaults
strict = true
warn_unreachable = true
warn_no_return = true

[[tool.mypy.overrides]]
# Don't require test functions to include types
module = "tests.*"
allow_untyped_defs = true
disable_error_code = "attr-defined"

